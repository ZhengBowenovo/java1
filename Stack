import java.util.Stack;

public class BalancedParentheses {
    private Stack<Character> stack;

    public BalancedParentheses() {
        stack = new Stack<>();
    }

    public void checkBalance(String expression) {
        for (char bracket : expression.toCharArray()) {
            if (bracket == '{' || bracket == '(' || bracket == '[') {
                stack.push(bracket);
            } else if (bracket == '}' || bracket == ')' || bracket == ']') {
                if (stack.isEmpty() || !isBalanced(stack.pop(), bracket)) {
                    System.out.println("The expression is not balanced");
                    return;
                }
            }
        }
        System.out.println("The expression is balanced");
    }

    private boolean isBalanced(char open, char close) {
        if (open == '{' && close == '}') {
            return true;
        } else if (open == '(' && close == ')') {
            return true;
        } else if (open == '[' && close == ']') {
            return true;
        }
        return false;
    }
}










import java.util.Scanner;

public class Main {

 public static void main(String[] args) throws Exception {
 System.out.println("Please enter an expressioon using only parentheses");
 Scanner reader = new Scanner(System.in);

 String expression = reader.nextLine();

BalancedParentheses balance = new BalancedParentheses();
 balance.balanceParentheses(expression);

 reader.close();
 }

}









